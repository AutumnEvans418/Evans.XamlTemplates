@page "/"
@inject IJSRuntime js

<div class="container">
    <div class="row">
        <div class="col p-2 d-flex justify-content-center align-content-center">
            <textarea class="p-2 form-control" @bind-value="@codestr" @bind-value:event="oninput"></textarea>
        </div>
        <div class="col p-2">

            <ul class="nav nav-tabs" id="myTab" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" id="home-tab" data-toggle="tab" href="#home" role="tab" aria-controls="home" aria-selected="true">@Xaml.FileName</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="profile-tab" data-toggle="tab" href="#profile" role="tab" aria-controls="profile" aria-selected="false">@CSharp.FileName</a>
                </li>
            </ul>
            <div class="tab-content" id="myTabContent">
                <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab">
                    <div class="card p-2">
                        <pre><code class="xml" id="xml">@Xaml.Content</code> </pre>
                    </div>
                </div>
                <div class="tab-pane fade" id="profile" role="tabpanel" aria-labelledby="profile-tab">
                    <div class="card p-2">
                        <pre><code class="csharp" id="csharp">@CSharp.Content</code></pre>
                    </div>
                </div>
            </div>
        </div>
    </div>
   
    <div class="row">
        <div class="col">
            <p style="color: red">@ErrorMessage</p>
        </div>
    </div>
</div>


@code {



    private string _codestr = Evans.XamlTemplates.Examples.Basic;
    public string codestr { get => _codestr; set { _codestr = value; CodeChanged(); } }
    public Evans.XamlTemplates.Generator.GeneratedFile Xaml { get; set; }
    public Evans.XamlTemplates.Generator.GeneratedFile CSharp { get; set; }
    public string ErrorMessage { get; set; } = "";

    Evans.XamlTemplates.Templator gen = new Evans.XamlTemplates.Templator();


    private async void CodeChanged()
    {
        Console.WriteLine("Code Changed!");
        try
        {
            var result = gen.Generate(codestr, "Templates");
            Console.WriteLine("success!");
            if (result.Any())
            {
                Xaml = result[0].Xaml;
                CSharp = result[0].CSharp;

                await js.InvokeVoidAsync("replace", "csharp", CSharp.Content);
                await js.InvokeVoidAsync("replace", "xml", Xaml.Content);
                await js.InvokeVoidAsync("highlight");

            }
            ErrorMessage = "";
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("highlighting...");
            await js.InvokeVoidAsync("highlight");
        }
    }

    protected override async void OnInitialized()
    {
        Console.WriteLine("Started!");
        CodeChanged();
    }

}
